class Solution {
public:
    int totalFruit(vector<int>& fruits) {
        int maxpicked = 0;

        for(int l = 0; l<fruits.size(); l++){
            set<int> baskets;
            int r = l;

            while(r < fruits.size()){
            if(baskets.find(fruits[r]) == baskets.end() && baskets.size() == 2){
                break;
            }
            baskets.insert(fruits[r]);
            r++;
            }
        maxpicked = max(maxpicked, r-l);
        }
        return maxpicked;
    }
};



class Solution {
public:
    int totalFruit(vector<int>& fruits) {
        int ans = 0;

        map<int, int>mp;
        int i=0, j=0, n = fruits.size();

        while(i < n){
            mp[fruits[i]]++;

            while(j < n && mp.size() > 2){
                if(mp[fruits[j]] == 1){
                    mp.erase(fruits[j]);
                }
                else{
                    mp[fruits[j]]--;
                }
                j++;
            }
            ans = max(ans, i-j+1);
            i++;
        }
        return ans;
    }
};
