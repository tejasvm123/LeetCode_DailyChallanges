class Solution {
public:
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(), satisfaction.end());

       vector<vector<int>> dp(satisfaction.size() + 1, vector<int>(satisfaction.size() + 2, 0));
        for(int idx = satisfaction.size() - 1; idx >= 0; idx--){
            for(int time = 1; time <= satisfaction.size(); time++){
                dp[idx][time] = max(satisfaction[idx] * time + dp[idx + 1][time + 1], dp[idx + 1][time]);
            }
        }
        return dp[0][1];
    }
};

class Solution {
public:
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end(),greater<int>());
        int n = satisfaction.size();
        vector<long long> dp(n,0);
        long long prv=0;
        for(int i=0;i<n;i++)
            prv = dp[i] = satisfaction[i]+prv;
        long long res=0;

        for(int i=0;i<n;i++) {
            res = max(res,res+dp[i]);
        }

        return res;
    }
};
