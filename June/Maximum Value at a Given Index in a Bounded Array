class Solution {
public:
    int maxValue(int n, int index, int maxSum) {
        long long left = 1, right = maxSum;
        int result = 0;

        while (left <= right) {
            long long mid = left + (right - left) / 2;

            if (isPossible(n, index, maxSum, mid)) {
                result = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return result;
    }

    bool isPossible(int n, int index, int maxSum, long long target) {
        long long sum = 0;

        long long left = target - index;
        long long right = target - (n - index - 1);

        sum += (left + target) * (index + 1) / 2;
        sum += (target + right) * (n - index) / 2;
        sum -= target;

        return sum <= maxSum;
    }
};
