class Solution {
public:
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        vector<vector<int>> grid(row,vector<int>(col,0));
        vector<vector<int>> vis(row,vector<int>(col,0));
        int ans = INT_MIN;
        int l = 0;
        int r = row*col - 1;
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,-1,0,1};

        while(l <= r){
            int mid = l + (r - l)/2;
            for(int i = 0; i <=mid; i++){
                grid[cells[i][0]-1][cells[i][1]-1] = 1;
            }
            //bfs
            queue<pair<int,int>> q;
            for(int i=0;i<col;i++)
                if(grid[0][i]==0){
                    q.push({0,i});
                    vis[0][i] = 1;
                }
            bool flag = false;    
            while(!q.empty()){
                auto it = q.front();
                q.pop();
                int r1 = it.first;
                int c1 = it.second;
                if(r1 == row - 1){
                    flag = true;
                    break;
                }
                for(int i=0;i<4;i++){
                    int newrow = r1 + delrow[i];
                    int newcol = c1 + delcol[i];
                    if(newrow >=0 && newrow < row && newcol >= 0 && newcol < col && !vis[newrow][newcol] && grid[newrow][newcol] == 0){
                        vis[newrow][newcol]=1;
                        q.push({newrow,newcol});
                    }
                }
            }    
            if(flag){
                l = mid + 1;
                ans = max(ans,mid+1);
            }
            else
                r = mid - 1;

            for(int i=0;i<row;i++)
                fill(grid[i].begin(),grid[i].end(),0);
            for(int i=0;i<row;i++)
                fill(vis[i].begin(),vis[i].end(),0);    
        }


        return ans;
    }
};
