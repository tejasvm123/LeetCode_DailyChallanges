class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if (grid[0][0] == 1 || grid[n-1][n-1] == 1) {
            return -1;
        }
        
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1; 
        
        vector<pair<int, int>> directions = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        
        while (!q.empty()) {
            auto [row, col] = q.front();
            q.pop();
            int distance = grid[row][col];
            
            if (row == n - 1 && col == n - 1) {
                return distance;
            }
            
            for (const auto& dir : directions) {
                int newRow = row + dir.first;
                int newCol = col + dir.second;
                
                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && grid[newRow][newCol] == 0) {
                    q.push({newRow, newCol});
                    grid[newRow][newCol] = distance + 1; 
                }
            }
        }
        
        return -1;
    }
};
