class Solution {
public:
    void getans(map<string,vector<pair<string,double>>>&adj,string node,map<string,int>&vis,double &res,string t,double pro){
        vis[node]=1;
        if(node==t){
            res=pro;
        }
        for(auto x:adj[node]){
            if(vis[x.first]==0){
                getans(adj,x.first,vis,res,t,pro*x.second);
            }
        }
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        int k=equations.size();
        map<string,vector<pair<string,double>>>adj;

        for(int i=0;i<equations.size();i++){
            string a=equations[i][0];
            string b=equations[i][1];
            adj[a].push_back({b,values[i]});
            adj[b].push_back({a,1/values[i]});
        }
        vector<double>ans;
        for(int i=0;i<queries.size();i++){
            double res=-1;
            map<string,int>vis;
            string a=queries[i][0];
            string b=queries[i][1];
            if(adj.find(a)!=adj.end())
            getans(adj,a,vis,res,b,1);
            ans.push_back(res);
        }
        return ans;
    }
};
